@startuml





package utils {

    class svg_utils {
        + from_svg(str file_path): Board
        + to_svg(str file_path): Board

    }
    class json_utils {
        + from_json(str file_path): Board
        + to_json(Board board): str
    }

    class util_functions {
        + sort_points(ndarray points): ndarray
        + led_id_generator(str prefix, int start) <<coroutine>>
        + find_index_closest_point(arr: ndarray, point: ndarray)
        + angle_between(v1: vector, v2: vector)
    }

    note as N1
    All functions are static
    and can be used without
    initialization of its classes
    end note

}

package view {
    note as N3
    Displays the data
    changes made by the
    Controller.
    end note

    class App {}

    class ControlPane {
        + master: tk.App
        + handler: EventHandler

        + __init_menu()
        + __init_filemenu(menu)
        + __init_editmenu(menu)

    }

    class ImagePane {
        - img: PIlImage
        - image: ImageTk.PhotoImage
        - board: Board
        - master: tk.App
        - container: ControlPane
        - handler: Edithandler
        - corner_references: List[canvas obj ref]
        - led_references: List[canvas obj ref]
        - current_state: tkinter.IntVar
        - canvas: tk.Canvas
        - last_image_size = List[int]
        - polygon: canvas element
        - leds_text_indices_references: [canvas obj ref]

        + update_image()
        + update_points()
        + on_resize(event)
        + draw_corner(point: List[int])
        + draw_led(position: ndarray, radius: int)
        + create_circle(position: ndarray, r: int)
        + update_polygon()
        + update_led_indices()
        + create_polygon()
        + activate_board_state()
        + activate_led_state()
        + update_board()
        + delete_circles()
    }

    class ToolBar {
        - master: tk.App
        - image_pane: ImagePane
        - handler: EditHandler
    }

    class Scrollable {
        - parent: tk.App
        - edit_handler: Edithandler

        + on_configure(event)
        + redraw_led_description()
    }

    class LedDisplay {
        - parent: tk.Frame
        - index: int
        - led: Led
        + number: tk.StringVar
        + name: tk.StringVar
        + red: tk.IntVar
        + yellow: tk.IntVar
        + green: tk.IntVar

        + update_number(new_number: int)

    }

    App *-- ControlPane

    ControlPane *-- ImagePane

    ControlPane *-- ToolBar
    ControlPane *-- Scrollable
    Scrollable *-- LedDisplay





}

package controller {
    note as N2
    Handles the user input and alters
    the data accordingly.
    end note

    class FileHandler {
        - EventHandler parent
        + save()
        + load()
    }

    class EditHandler {
        - EventHandler parent
        - float scaling
        - tkinter.Intvar current_state
        - np.arrray active_cirlce
        - List[np.array] deleted_corners
        - List[Led] deleted_leds
        - Board Board

        + Board(): Board
        + add_led(event)
        + add_corner(event)
        + delete_point(event)
        + undo()
        + redo()
        + moving_point(event)
        + on_mousewheel(event)
        + check_hovered(cx, cy)
        + is_state(state)
    }

    class EventHandler{
        + Enum state
        + update_board(board)
        + update(channel="")
        + update_points()
        + update_image()
    }

    EventHandler --> EditHandler
    EventHandler --> FileHandler

}

package model {
    class Led {
        + indentifier: str
        + position: ndarray
        + radius: int
        + colors: List[str]
    }
    note left of Led::position
    size= 2
    dtype= int32
    end note

    class Board {
        + name: str
        + author: str
        + img_path: str
        + corners: ndarray
        + led_objects: [Led]
        + image: ndarray

        + set_board_corners(points: List)
        + add_led(led: Led, relative_vector=False)
        + set_image(image: ndarray)
        + get_relative_vector(vector: ndarray)
        + get_cropped_board()
    }

    note left of Board::corners
    shape nx2
    dtype int32
    end note

    Board *-d- Led


}
ControlPane --d-- EventHandler
FileHandler -d-> svg_utils: <<use>>
FileHandler -d-> json_utils: <<use>>
EditHandler -d-> util_functions: <<uses>>
EventHandler -l-> Board

controller --[hidden]l-- model
view --[hidden]l-- model
EditHandler -- ImagePane: updates


@enduml